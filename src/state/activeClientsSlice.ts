import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import type { RootState, AppThunk  } from '../state/store'
import type { Client } from '../types'

// Define a type for the slice state
export interface ClientState {
    activeClient: Client | null,
    allClients: Client[],
    clientListStatus: 'stable' | 'loading' | 'failed'
}

// Define the initial state using that type
const initialState: ClientState = {
    activeClient: null,
    allClients: [],
    clientListStatus: 'stable'
}

const API_URL = "http://127.0.0.1:8080/admin";


export const refreshClientsThunk = createAsyncThunk(
  'clients/refreshClients',
  async () => {
      try {
        const response = await fetch(`${API_URL}/clients`);
        if (!response.ok) {
          throw new Error("Failed to update clients");
        }
        const data = await response.json();
        return data;
    } catch (error) {
        console.log(`Failed to update clients ${error}`);
    }
  }
)

export const clientSlice = createSlice({
  name: 'clients',
  // `createSlice` will infer the state type from the `initialState` argument
  initialState,
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    setActive: (state, action: PayloadAction<Client | null>) => {
      state.activeClient = action.payload
    },
    setAll: (state, action: PayloadAction<Client[]>) => {
      state.allClients = action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addCase(refreshClientsThunk.pending, state => {
        state.clientListStatus = 'loading'
      })
      .addCase(refreshClientsThunk.fulfilled, (state, action) => {
        state.clientListStatus = 'stable'
        state.allClients += action.payload
      })
      .addCase(refreshClientsThunk.rejected, state => {
        state.clientListStatus = 'failed'
      })
  }
})


export const { setActive } = clientSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectActiveClient = (state: RootState) => state.clients.activeClient
export const selectAllClients = (state: RootState) => state.clients.allClients
export const setActiveClient = (client: Client): AppThunk =>
  (dispatch) => {
      dispatch(setActive(client))
  }
export const refreshClients = (): AppThunk =>
  (dispatch) => {
      dispatch(refreshClientsThunk())
  }


export default clientSlice.reducer
